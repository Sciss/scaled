#!/usr/bin/env bash
#
# Scaled Package Manager bootstrap script

# use java found in path unless JAVA_HOME is set, in which case, that
declare JAVA_CMD=java
# if set, use JAVA_HOME over java found in path
[[ -e "$JAVA_HOME/bin/java" ]] && JAVA_CMD="$JAVA_HOME/bin/java"

# determine the location where Scaled will store its bits
declare SCALED_HOME=$HOME/.scaled
declare APPSUP="$HOME/Library/Application Support"
[[ -d $APPSUP ]] && SCALED_HOME="$APPSUP/Scaled"

# declare some Maven bits
declare M2REPO=$HOME/.m2/repository
declare CAPSULE=co/paralleluniverse/capsule/0.5.0/capsule-0.5.0.jar
declare M2CAPSULE=$M2REPO/$CAPSULE

# declare some scaled/pacman bits
declare SCALED_GIT=https://github.com/scaled/scaled.git
declare SCALED_PKG=$SCALED_HOME/Packages/scaled
declare PACMAN_ROOT=$SCALED_PKG/pacman
declare PACMAN_CLASSES=$PACMAN_ROOT/target/classes

download() {
  local URL="$1"
  local FILE="$2"

  echo "Downloading $URL..."
  mkdir -p "${FILE%/*}" && {
      if hash curl 2>/dev/null; then
          curl -L -s -S -o "$FILE" $URL
      elif hash wget 2>/dev/null; then
          wget -nv -O "$FILE" $URL
      else
          echo "Need curl or wget to install dependencies."
          exit 255
      fi
  } && [[ -s "$FILE" ]]
}

# download capsule if needed
if [ ! -s $M2CAPSULE ]; then
    download "http://central.maven.org/maven2/$CAPSULE" "$M2CAPSULE"
fi

# check out scaled package if needed
if [ ! -d "$SCALED_PKG" ]; then
    if hash git 2>/dev/null; then
        echo "Cloning $SCALED_GIT..."
        git clone -q "$SCALED_GIT" "$SCALED_PKG" && [[ -d "$SCALED_PKG" ]]
    else
        echo "Need 'git' to install dependencies."
        exit 255
    fi
fi

# build pacman if needed
if [ ! -s "$PACMAN_CLASSES/scaled/pacman/Pacman.class" ]; then
    # determine which javac we'll use
    declare JAVAC_CMD=javac
    [[ -e "$JAVA_HOME/bin/javac" ]] && JAVA_CMD="$JAVA_HOME/bin/javac"

    pushd "$PACMAN_ROOT"
    mkdir -p "target/classes"
    find src/main/java -name '*.java' > "target/pacman.sources"
    echo "Compiling Scaled package manager..."
    $JAVAC_CMD -classpath "$M2CAPSULE" -d target/classes @target/pacman.sources
    popd
fi

addJvmArg () {
  JVMARGS=( "${JVMARGS[@]}" "$1" )
}
addArg () {
  ARGS=( "${ARGS[@]}" "$1" )
}

# process command line args
declare -a JVMARGS=("-classpath" "$PACMAN_CLASSES:$M2CAPSULE")
declare -a ARGS=("scaled.pacman.Pacman")
while [[ $# -gt 0 ]]; do
    case "$1" in
        -D*     ) addJvmArg "$1"           && shift ;;
        -J*     ) addJvmArg "${1:2}"       && shift ;;
        -d      ) addJvmArg "-Ddebug=true" && shift ;;
        -l|--log) LOG=$2                   && shift 2 ;;
        *       ) addArg "$1"              && shift ;;
    esac
done

# bombs away!
if [ ! -z "$LOG" ]; then
    exec $JAVA_CMD "${JVMARGS[@]}" "${ARGS[@]}" >$LOG 2>&1 &
else
    exec $JAVA_CMD "${JVMARGS[@]}" "${ARGS[@]}"
fi
