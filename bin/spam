#!/usr/bin/env bash
#
# Scaled Package Manager bootstrap script

# use java found in path unless JAVA_HOME is set, in which case, that
declare JAVA_CMD=java
# if set, use JAVA_HOME over java found in path
[[ -e "$JAVA_HOME/bin/java" ]] && JAVA_CMD="$JAVA_HOME/bin/java"

# determine the location where Scaled will store its bits
declare SCALED_HOME=$HOME/.scaled
declare APPSUP="$HOME/Library/Application Support"
[[ -d $APPSUP ]] && SCALED_HOME="$APPSUP/Scaled"

# declare some Maven bits
declare M2REPO=$HOME/.m2/repository
declare CAPSULE=co/paralleluniverse/capsule/0.5.0/capsule-0.5.0.jar
declare M2CAPSULE=$M2REPO/$CAPSULE

# declare some pacman bits
declare PACMAN_JAR=$SCALED_HOME/pacman.jar
declare PACMAN_BUILD=$SCALED_HOME/Packages/scaled/pacman/target/classes

download() {
  local URL="$1"
  local FILE="$2"

  echo "Downloading $URL..."
  mkdir -p "${FILE%/*}" && {
      if hash curl 2>/dev/null; then
          curl -L -s -S -o "$FILE" $URL
      elif hash wget 2>/dev/null; then
          wget -nv -O "$FILE" $URL
      else
          echo "Need curl or wget to install dependencies."
          exit 255
      fi
  } && [[ -s "$FILE" ]]
}

# download capsule if needed
if [ ! -s $M2CAPSULE ]; then
    download "http://central.maven.org/maven2/$CAPSULE" "$M2CAPSULE"
fi

# download pacman if needed
if [ -s "$PACMAN_JAR" ]; then
    PACMANCP="$PACMAN_JAR"
elif [ -d "$PACMAN_BUILD" ]; then
    PACMANCP="$PACMAN_BUILD"
else
    download "https://github.com/scaled/scaled/releases/download/v0.1.3/pacman.jar" "$PACMAN_JAR"
    PACMANCP="$PACMAN_JAR"
fi

addJvmArg () {
  JVMARGS=( "${JVMARGS[@]}" "$1" )
}
addArg () {
  ARGS=( "${ARGS[@]}" "$1" )
}

# process command line args
declare -a JVMARGS=("-classpath" "$PACMANCP:$M2CAPSULE")
declare -a ARGS=("scaled.pacman.Pacman")
while [[ $# -gt 0 ]]; do
    case "$1" in
        -D*     ) addJvmArg "$1"           && shift ;;
        -J*     ) addJvmArg "${1:2}"       && shift ;;
        -d      ) addJvmArg "-Ddebug=true" && shift ;;
        -l|--log) LOG=$2                   && shift 2 ;;
        *       ) addArg "$1"              && shift ;;
    esac
done

# bombs away!
if [ ! -z "$LOG" ]; then
    exec $JAVA_CMD "${JVMARGS[@]}" "${ARGS[@]}" >$LOG 2>&1 &
else
    exec $JAVA_CMD "${JVMARGS[@]}" "${ARGS[@]}"
fi
