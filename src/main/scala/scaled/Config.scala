//
// Scaled - a scalable editor extensible via JVM languages
// http://github.com/samskivert/scaled/blob/master/LICENSE

package scaled

import reactual.ValueV

/** Provides editor configuration to modes. The global configuration and mode configuration will be
  * combined together into an instance of this trait and supplied to a mode when it is constructed.
  *
  * A configuration consists of a collection of settings, which can be customized by the user. Each
  * setting is identified by a [ConfigKey] and maps to some value. The value may be of any type,
  * usually that's a simple value type (Int, String, etc.), but it could also be a function that's
  * meant to be configurable, or editor- or mode-wide state (like a [[Ring]]).
  *
  * Configuration entries are reactive values and modes are encouraged to react to changes in
  * configuration entries which are designed to be customized by the end user.
  */
trait Config {

  /** Returns a reactive view of the value of `key`. */
  def value[T] (key :ConfigKey[T]) :ValueV[T]

  /** Resolves the currently configured value for `key`. */
  def apply[T] (key :ConfigKey[T]) :T = value(key).get

  /** Updates the value for `key` in the current buffer only. */
  def update[T] (key :ConfigKey[T], value :T) :Unit
}

/** A key that identifies a single configuration setting.
  *
  * @param descrip A human readable description.
  * @param global whether this config is editor global or local to a major or minor mode.
  */
abstract class ConfigKey[T] (val descrip :String, val global :Boolean) {

  /** The value to use if this setting is not customized by the user. */
  def defval (config :Config) :T

  override def toString () = s"$global / $descrip"
}

/** The base class for a collection of configuration definitions. The (global) editor config object
  * ([[EditorConfig]]) extends this as well as each individual mode's config definition object.
  */
abstract class ConfigDefs (global :Boolean = false) {

  /** Creates a config key described by `desc` with default value `default`. */
  protected def key[T] (desc :String, default :T) :ConfigKey[T] = new ConfigKey[T](desc, global) {
    override def defval (config :Config) = default
  }

  /** Creates a config key described by `desc` that defaults to the value of `default`. */
  protected def key[T] (desc :String, default :ConfigKey[T]) = new ConfigKey[T](desc, global) {
    override def defval (config :Config) = config(default)
  }

  /** Creates a config key described by `desc` that defaults to the value generated by applying
    * `deffn` to the current configuration. `deffn` will only be called once to generate the value
    * and that value will be used for the lifetime of the configuration instance. */
  protected def key[T] (desc :String)(deffn :Config => T) = new ConfigKey[T](desc, global) {
    override def defval (config :Config) = deffn(config)
  }
}

/** Defines editor-global configurables. */
object EditorConfig extends ConfigDefs(true) {

  val viewWidth = key("The default width of editor views, in characters.", 100)
  val viewHeight = key("The default height of editor views, in characters.", 40)

  val killRingSize = key("The number of entries retained by the kill ring.", 40)
  val killRing = key("The ring in which killed blocks of text are stored.") {
    cfg => new Ring(cfg(killRingSize))
  }
}
